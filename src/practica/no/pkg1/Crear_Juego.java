/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica.no.pkg1;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.IOException;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Tony
 */
public class Crear_Juego extends javax.swing.JFrame {

    /**
     * Creates new form Crear_Juego
     */
    int longitud = 0;
    int longitud1 = 0;
    public int contador_filas = 2;
    public int contador_columnas = 4;
    int donde = 0;
    int conta_celdas;
    int conta_columnas;
    int contador_ID = 0;
    String objeto_seleccionado = "";
    Carga_Objetos carga_objetos = new Carga_Objetos(null, null, 0);
    //Nodo_Lista temp = /*carga_objetos.*/Lista_Objetos.primero;
    //Lista_Doble Lista_Objetos = new Lista_Doble();
    Matriz Matriz_Tablero = new Matriz();

    public Crear_Juego() {
        initComponents();

        this.Pane_principal.setBackground(Color.BLUE);

        this.llenar_matriz(contador_columnas, contador_filas, "vacio");

        this.crear_pane_objetos();
        this.crear_pane_principal(contador_filas, contador_columnas);
        SwingUtilities.updateComponentTreeUI(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pane_objetos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Pane_principal = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout Pane_objetosLayout = new javax.swing.GroupLayout(Pane_objetos);
        Pane_objetos.setLayout(Pane_objetosLayout);
        Pane_objetosLayout.setHorizontalGroup(
            Pane_objetosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        Pane_objetosLayout.setVerticalGroup(
            Pane_objetosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout Pane_principalLayout = new javax.swing.GroupLayout(Pane_principal);
        Pane_principal.setLayout(Pane_principalLayout);
        Pane_principalLayout.setHorizontalGroup(
            Pane_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 913, Short.MAX_VALUE)
        );
        Pane_principalLayout.setVerticalGroup(
            Pane_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(Pane_principal);

        jButton1.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/no/pkg1/Imagenes/agregar.png"))); // NOI18N
        jButton1.setText("Agregar Fila");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/no/pkg1/Imagenes/agregar.png"))); // NOI18N
        jButton2.setText("Agregar Columna");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/no/pkg1/Imagenes/mostrar.png"))); // NOI18N
        jButton3.setText("Graficar Lista");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/no/pkg1/Imagenes/mostrar.png"))); // NOI18N
        jButton4.setText("Graficar Matriz");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/no/pkg1/Imagenes/Eliminar.gif"))); // NOI18N
        jButton5.setText("Eliminar Fila");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/no/pkg1/Imagenes/Eliminar.gif"))); // NOI18N
        jButton6.setText("Eliminar Columna");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/no/pkg1/Imagenes/Eliminar.gif"))); // NOI18N
        jButton7.setText("Quitar Objeto");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/no/pkg1/Imagenes/play.jpg"))); // NOI18N
        jButton8.setText("Iniciar Juego");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/no/pkg1/Imagenes/resumen.png"))); // NOI18N
        jButton9.setText("Resumen de Objetos");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jLabel3.setText("Objeto Seleccionado:");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jLabel2.setText(":");

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        jLabel1.setText("Forma de Extracion de Objetos:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 915, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(Pane_objetos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Pane_objetos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 11, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Agregar fila
        contador_filas++;
        System.out.print("\n\n agregando fila\n");
        if (Matriz_Tablero.raiz != null) {
            this.agregar_fila();
            this.crear_pane_principal(contador_filas, contador_columnas);
            SwingUtilities.updateComponentTreeUI(this);
            Matriz_Tablero.imprimir_matriz();
        } else {
            this.contador_ID = 0;
            this.llenar_matriz(contador_columnas, contador_filas, "vacio");
            this.crear_pane_principal(contador_filas, contador_columnas);
            SwingUtilities.updateComponentTreeUI(this);
            Matriz_Tablero.imprimir_matriz();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Agregar Columna
        contador_columnas++;
        System.out.print("\n \n\n agregando columna\n");
        if (Matriz_Tablero.raiz != null) {
            this.agregar_columna();
            Matriz_Tablero.imprimir_matriz();
            this.crear_pane_principal(contador_filas, contador_columnas);
            SwingUtilities.updateComponentTreeUI(this);
            Matriz_Tablero.imprimir_matriz();
        } else {
            this.contador_ID = 0;
            this.llenar_matriz(contador_columnas, contador_filas, "vacio");
            this.crear_pane_principal(contador_filas, contador_columnas);
            SwingUtilities.updateComponentTreeUI(this);
            Matriz_Tablero.imprimir_matriz();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Graficar Lista
        Graficar_Estructuras GE = new Graficar_Estructuras();
        GE.Grificar_Lista_Doble();
        if (carga_objetos.Lista_Objetos.primero != null) {
            try {
                File objetofile = new File("Lista Objetos.jpg");
                Desktop.getDesktop().open(objetofile);
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Graficar Matriz
        Graficar_Estructuras GE = new Graficar_Estructuras();
        GE.Grificar_Matriz(this.Matriz_Tablero);
        try {
            File objetofile = new File("Matriz.jpg");
            Desktop.getDesktop().open(objetofile);
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Eliminiar Fila
        Nodo_Matriz actual = Matriz_Tablero.raiz;
        int i = 0;
        while (actual != null) {
            actual = actual.abajo;
            i++;
        }

        String[] forma = new String[i];
        actual = Matriz_Tablero.raiz;

        i = 0;
        while (actual != null) {
            forma[i] = "" + (i + 1);
            actual = actual.abajo;
            i++;
        }

        String fila_eliminar = (String) JOptionPane.showInputDialog(this, "¿Que fila es la que desea Eliminar?", "Eliminacion de Fila", JOptionPane.QUESTION_MESSAGE, null, forma, forma[0]);

        int fe = Integer.parseInt(fila_eliminar);
        if (Matriz_Tablero.fila_vacia(fe)) {
            Matriz_Tablero.eliminar_fila(fe);
            contador_filas--;
            if (contador_filas != 0) {
                this.crear_pane_principal(contador_filas, contador_columnas);
                SwingUtilities.updateComponentTreeUI(this);
                Matriz_Tablero.imprimir_matriz();
            }
        } else {
            JOptionPane.showMessageDialog(this, "La fila seleccionada contiene objetos", "Fila con objetos", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Eliminiar Columna
        Nodo_Matriz actual = Matriz_Tablero.raiz;
        int i = 0;
        while (actual != null) {
            actual = actual.izquierda;
            i++;
        }

        String[] forma = new String[i];
        actual = Matriz_Tablero.raiz;
        i = 0;
        while (actual != null) {
            forma[i] = "" + (i + 1);
            actual = actual.izquierda;
            i++;
        }

        String fila_eliminar = (String) JOptionPane.showInputDialog(this, "¿Que fila es la que desea Eliminar?", "Eliminacion de Fila", JOptionPane.QUESTION_MESSAGE, null, forma, forma[0]);

        int fe = Integer.parseInt(fila_eliminar);
        if (Matriz_Tablero.columna_vacia(fe)) {
            Matriz_Tablero.eliminar_columna(fe);

            contador_columnas--;
            if (contador_columnas != 0) {
                this.crear_pane_principal(contador_filas, contador_columnas);
                SwingUtilities.updateComponentTreeUI(this);
                Matriz_Tablero.imprimir_matriz();
            }
        } else {
            JOptionPane.showMessageDialog(this, "La columna seleccionada contiene objetos", "Columna con objetos", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Quitar Objetos
        Nodo_Matriz actual = Matriz_Tablero.raiz;
        int i = 0;
        int cuantas_columnas = 0;
        while (actual != null) {
            actual = actual.izquierda;
            i++;
        }
        cuantas_columnas = i;

        String[] forma = new String[i];
        actual = Matriz_Tablero.raiz;
        i = 0;
        while (actual != null) {
            forma[i] = "" + (i + 1);
            actual = actual.izquierda;
            i++;
        }

        actual = Matriz_Tablero.raiz;
        i = 0;
        while (actual != null) {
            actual = actual.abajo;
            i++;
        }

        String[] forma1 = new String[i];
        actual = Matriz_Tablero.raiz;
        i = 0;
        while (actual != null) {
            forma1[i] = "" + (i + 1);
            actual = actual.abajo;
            i++;
        }

        String objeto_fila = (String) JOptionPane.showInputDialog(this, "Seleccione la columna donde quiere quitar el objeto", "Quitar Objetos", JOptionPane.QUESTION_MESSAGE, null, forma, forma[0]);
        String objeto_columna = (String) JOptionPane.showInputDialog(this, "Seleccione la fila donde quiere quitar el objeto", "Quitar Objeto", JOptionPane.QUESTION_MESSAGE, null, forma1, forma1[0]);

        int ID_modificar = ((Integer.parseInt(objeto_fila)) + (cuantas_columnas * (Integer.parseInt(objeto_columna) - 1)) - 1);
        //JOptionPane.showMessageDialog(this, "( ( " + objeto_fila + ") + ( " + cuantas_columnas + " * ( " + objeto_columna + " - 1 ) - 1 ) = " + ID_modificar);
        if (Matriz_Tablero.nodo_objeto(ID_modificar).equals("vacio")) {
            JOptionPane.showMessageDialog(null, "El nodo seleccionado esta vacio.");
        } else {
            if (this.jLabel2.getText().equals("Como una Pila.")) {
                carga_objetos.Lista_Objetos.sampar_al_inicio("Agregado", Matriz_Tablero.nodo_objeto(ID_modificar), 0);
            } else {
                carga_objetos.Lista_Objetos.sampar_lista("Agregado", Matriz_Tablero.nodo_objeto(ID_modificar), 0);
            }
            carga_objetos.Lista_Objetos.reacomodar_indices(carga_objetos.Lista_Objetos);
            this.crear_pane_objetos();
            Matriz_Tablero.modificar(ID_modificar, "vacio");
            //Matriz_Tablero.imprimir_matriz();
            this.crear_pane_principal(contador_filas, contador_columnas);
            SwingUtilities.updateComponentTreeUI(this);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // Iniciar Juego
        Juego juego = new Juego(contador_filas, contador_columnas, Matriz_Tablero);
        juego.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // Resumen de Objetos
        int conta_suelo = 0;
        int conta_pared = 0;
        int conta_goomba = 0;
        int conta_mario = 0;
        int conta_tortuga = 0;
        int conta_ficha = 0;
        int conta_hongo = 0;
        int conta_castillo = 0;
        Nodo_Lista ob = this.carga_objetos.Lista_Objetos.primero;
        while (ob != null) {
            if (ob.objeto.equals("Pared")) {
                conta_pared++;
            } else if (ob.objeto.equals("Suelo")) {
                conta_suelo++;
            } else if (ob.objeto.equals("Goomba")) {
                conta_goomba++;
            } else if (ob.objeto.equals("Mario")) {
                conta_mario++;
            } else if (ob.objeto.equals("Tortuga")) {
                conta_tortuga++;
            } else if (ob.objeto.equals("Ficha")) {
                conta_ficha++;
            } else if (ob.objeto.equals("Hongo")) {
                conta_hongo++;
            } else if (ob.objeto.equals("Castillo")) {
                conta_castillo++;
            }
            ob = ob.siguiente;
        }
        JOptionPane.showMessageDialog(this, "Pared: " + conta_pared + "\n"
                + "Suelo: " + conta_suelo + "\n"
                + "Goomba: " + conta_goomba + "\n"
                + "Personaje Princial (Mario): " + conta_mario + "\n"
                + "Koopa (Tortuga): " + conta_tortuga + "\n"
                + "Ficha: " + conta_ficha + "\n"
                + "Hongo de vida: " + conta_hongo + "\n"
                + "Castillo: " + conta_castillo + "\n");
    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Crear_Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Crear_Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Crear_Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Crear_Juego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Crear_Juego().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Pane_objetos;
    private javax.swing.JPanel Pane_principal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public String cual_objeto(String ob) {
        if (ob.equals("Pared")) {
            return "src\\practica\\no\\pkg1\\Imagenes\\Pared.jpg";
        } else if (ob.equals("Suelo")) {
            return "src\\practica\\no\\pkg1\\Imagenes\\Suelo.jpg";
        } else if (ob.equals("Goomba")) {
            return "src\\practica\\no\\pkg1\\Imagenes\\goomba.png";
        } else if (ob.equals("Mario")) {
            return "src\\practica\\no\\pkg1\\Imagenes\\Mario.png";
        } else if (ob.equals("Tortuga")) {
            return "src\\practica\\no\\pkg1\\Imagenes\\Tortuga.jpg";
        } else if (ob.equals("Ficha")) {
            return "src\\practica\\no\\pkg1\\Imagenes\\ficha.jpg";
        } else if (ob.equals("Hongo")) {
            return "src\\practica\\no\\pkg1\\Imagenes\\Vida.jpg";
        } else if (ob.equals("Castillo")) {
            return "src\\practica\\no\\pkg1\\Imagenes\\Castillo.jpg";
        } else {
            return null;//"src\\practica\\no\\pkg1\\Imagenes\\nada.png";
        }
        //return null;
    }

    public void crear_pane_principal(int fila, int columna) {

        int tamaño_fila;
        int tamaño_columna;

        //Nodo_Lista temporal = /*carga_objetos.*/Lista_Objetos.primero;
        Nodo_Matriz temp1 = this.Matriz_Tablero.raiz;
        /*while (temporal != null) {
         temporal = temporal.siguiente;
         longitud++;
         }*/
        longitud = columna;

        int largo = 70 * columna;
        int ancho = 70 * fila;

        this.Pane_principal.removeAll();
        this.Pane_principal.setBorder(BorderFactory.createLineBorder(Color.BLUE));
        this.Pane_principal.setPreferredSize(new Dimension(largo, ancho));

        int No_filas = fila;//Integer.parseInt(this.jTextField1.getText());
        int No_columnas = longitud;//Integer.parseInt(this.jTextField2.getText());

        int altura_pane_Matriz = ancho;//this.Pane_objetos.getSize().height;
        int ancho_pane_Matriz = largo;//this.Pane_objetos.getSize().width;

        tamaño_fila = ancho_pane_Matriz / No_columnas;
        tamaño_columna = altura_pane_Matriz / No_filas;

        int contador_Lista = (No_filas * No_columnas);
        javax.swing.JLabel[] label = new javax.swing.JLabel[contador_Lista];

        int columnas;
        int multiplicador_filas = 0;

        for (int Contador_celdas = 0; Contador_celdas < contador_Lista; Contador_celdas++) {
            if (temp1 != null) {
                label[Contador_celdas] = new javax.swing.JLabel();
                label[Contador_celdas].setBounds((tamaño_fila * 0), (tamaño_columna * multiplicador_filas), tamaño_fila, tamaño_columna);
                label[Contador_celdas].setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                label[Contador_celdas].setBorder(BorderFactory.createLineBorder(Color.GRAY));
                if (temp1.objeto.equals("vacio")) {
                    label[Contador_celdas].removeAll();
                    label[Contador_celdas].repaint();
                } else {
                    ImageIcon img = new ImageIcon(cual_objeto(temp1.objeto));
                    Icon icono = new ImageIcon(img.getImage().getScaledInstance(70, 70, Image.SCALE_DEFAULT));
                    label[Contador_celdas].removeAll();
                    label[Contador_celdas].setIcon(icono);
                    label[Contador_celdas].repaint();
                    label[Contador_celdas].setIcon(icono);
                }
                //label[Contador_celdas].setText("" + (Contador_celdas + 1));
                label[Contador_celdas].addMouseListener(new MouseListener() {

                    @Override
                    public void mouseClicked(MouseEvent me) {
                        for (int i = 0; i < contador_Lista; i++) {
                            if (me.getSource().equals(label[i])) {
                                //JOptionPane.showMessageDialog(null, "DONDE: " + i);
                                if (objeto_seleccionado.equals("")) {
                                    JOptionPane.showMessageDialog(null, "\nNo ha seleccionado un objeto\nSeleccione uno porfavor", "Advertencia", JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    donde = i;
                                    conta_celdas = i;
                                    //JOptionPane.showMessageDialog(null, "Contador celdas: " + conta_celdas);
                                    if (Matriz_Tablero.nodo_objeto(donde).equals("vacio")) {
                                        ImageIcon img = new ImageIcon(cual_objeto(objeto_seleccionado));
                                        Icon icono = new ImageIcon(img.getImage().getScaledInstance(70, 70, Image.SCALE_DEFAULT));
                                        label[donde].removeAll();
                                        label[donde].setIcon(icono);
                                        label[donde].repaint();
                                        label[donde].setIcon(icono);
                                        Matriz_Tablero.modificar(conta_celdas, objeto_seleccionado);
                                        Matriz_Tablero.imprimir_matriz();
                                        objeto_seleccionado = "";
                                        enviar_texto(objeto_seleccionado);
                                    } else {
                                        JOptionPane.showMessageDialog(null, "El nodo seleccionado no esta vacio.");
                                    }
                                }
                            }
                        }
                        //actualizar();
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mousePressed(MouseEvent me
                    ) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mouseReleased(MouseEvent me
                    ) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mouseEntered(MouseEvent me
                    ) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mouseExited(MouseEvent me
                    ) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
                });

                this.Pane_principal.add(label[Contador_celdas], null);

                int columna_temp = 1;
                //temp1 = temp1.abajo;
                Nodo_Matriz tempo = temp1.izquierda;
                for (columnas = Contador_celdas + 1; columnas < Contador_celdas + No_columnas; columnas++) {
                    if (tempo != null) {
                        label[columnas] = new javax.swing.JLabel();
                        label[columnas].setBounds(tamaño_fila * columna_temp, (tamaño_columna * multiplicador_filas), tamaño_fila, tamaño_columna);
                        label[columnas].setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        label[columnas].setBorder(BorderFactory.createLineBorder(Color.GRAY));
                        if (tempo.objeto.equals("vacio")) {
                            label[columnas].removeAll();
                            label[columnas].repaint();
                        } else {
                            ImageIcon img1 = new ImageIcon(cual_objeto(tempo.objeto));
                            Icon icono1 = new ImageIcon(img1.getImage().getScaledInstance(70, 70, Image.SCALE_DEFAULT));
                            label[columnas].removeAll();
                            label[columnas].setIcon(icono1);
                            label[columnas].repaint();
                            label[columnas].setIcon(icono1);
                        }
                        //label[columnas].setText("" + (columnas + 1));
                        this.conta_columnas = columnas;
                        label[columnas].addMouseListener(new MouseListener() {

                            @Override
                            public void mouseClicked(MouseEvent me) {
                                for (int i = 0; i < contador_Lista; i++) {
                                    if (me.getSource().equals(label[i])) {
                                        //JOptionPane.showMessageDialog(null, "DONDE: " + i);
                                        if (objeto_seleccionado.equals("")) {
                                            JOptionPane.showMessageDialog(null, "\nNo ha seleccionado un objeto\nSeleccione uno porfavor", "Advertencia", JOptionPane.INFORMATION_MESSAGE);
                                        } else {
                                            donde = i;
                                            conta_celdas = i;
                                            //JOptionPane.showMessageDialog(null, "Contador celdas: " + conta_celdas + " Contador columnas: " + conta_columnas);
                                            if (Matriz_Tablero.nodo_objeto(donde).equals("vacio")) {
                                                ImageIcon img = new ImageIcon(cual_objeto(objeto_seleccionado));
                                                Icon icono = new ImageIcon(img.getImage().getScaledInstance(70, 70, Image.SCALE_DEFAULT));
                                                label[donde].removeAll();
                                                label[donde].setIcon(icono);
                                                label[donde].repaint();
                                                label[donde].setIcon(icono);
                                                Matriz_Tablero.modificar(conta_celdas, objeto_seleccionado);
                                                Matriz_Tablero.imprimir_matriz();
                                                objeto_seleccionado = "";
                                                enviar_texto(objeto_seleccionado);
                                            } else {
                                                JOptionPane.showMessageDialog(null, "El nodo no esta vacio.");
                                            }
                                        }
                                    }
                                }
                                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                            }

                            @Override
                            public void mousePressed(MouseEvent me) {
                                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                            }

                            @Override
                            public void mouseReleased(MouseEvent me) {
                                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                            }

                            @Override
                            public void mouseEntered(MouseEvent me) {
                                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                            }

                            @Override
                            public void mouseExited(MouseEvent me) {
                                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                            }
                        });
                        this.Pane_principal.add(label[columnas], null);

                        columna_temp++;
                    }
                    tempo = tempo.izquierda;
                }
                temp1 = temp1.abajo;
            }

            multiplicador_filas++;
            Contador_celdas = Contador_celdas + No_columnas - 1;
        }
    }

    public void crear_pane_objetos() {
        Nodo_Lista temp = carga_objetos.Lista_Objetos.primero;
        int tamaño_fila;
        int tamaño_columna;

        Nodo_Lista temporal = carga_objetos.Lista_Objetos.primero;
        while (temporal != null) {
            temporal = temporal.siguiente;
            longitud1++;
        }

        int largo = 70 * longitud1;
        int ancho = 200;

        this.Pane_objetos.removeAll();
        this.Pane_objetos.setBorder(BorderFactory.createLineBorder(Color.BLUE));

        int No_filas = 3;//Integer.parseInt(this.jTextField1.getText());
        int No_columnas = longitud1;//Integer.parseInt(this.jTextField2.getText());

        int altura_pane_Matriz = ancho;//this.Pane_objetos.getSize().height;
        int ancho_pane_Matriz = largo;//this.Pane_objetos.getSize().width;

        if (longitud1 == 0) {
            tamaño_fila = 1 / 1;
            tamaño_columna = altura_pane_Matriz / No_filas;
        } else {
            tamaño_fila = ancho_pane_Matriz / No_columnas;
            tamaño_columna = altura_pane_Matriz / No_filas;
        }
        int contador_Lista = (No_filas * No_columnas);
        javax.swing.JLabel[] label = new javax.swing.JLabel[contador_Lista];

        int columnas;
        int multiplicador_filas = 0;

        for (int Contador_celdas = 0; Contador_celdas < contador_Lista; Contador_celdas++) {
            if (temp != null) {
                label[Contador_celdas] = new javax.swing.JLabel();
                label[Contador_celdas].setBounds((tamaño_fila * 0), (tamaño_columna * multiplicador_filas), tamaño_fila, tamaño_columna);
                label[Contador_celdas].setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                label[Contador_celdas].setBorder(BorderFactory.createLineBorder(Color.BLUE));
                ImageIcon img = new ImageIcon(cual_objeto(temp.objeto));
                Icon icono = new ImageIcon(img.getImage().getScaledInstance(70, 70, Image.SCALE_DEFAULT));
                label[Contador_celdas].removeAll();
                label[Contador_celdas].setIcon(icono);
                label[Contador_celdas].repaint();
                label[Contador_celdas].setIcon(icono);
                label[Contador_celdas].setText("" + (Contador_celdas + 1));
                label[Contador_celdas].addMouseMotionListener(new MouseMotionListener() {

                    @Override
                    public void mouseDragged(MouseEvent me) {
                    }

                    @Override
                    public void mouseMoved(MouseEvent me) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
                });

                label[Contador_celdas].addMouseListener(new MouseListener() {

                    @Override
                    public void mouseClicked(MouseEvent me) {
                        objeto_seleccionado = carga_objetos.Lista_Objetos.primero.objeto;
                        enviar_texto(objeto_seleccionado);
                        carga_objetos.Lista_Objetos.eliminar_lista(carga_objetos.Lista_Objetos, 0);
                        crear_pane_objetos();
                        //Crear_Juego CJ = new Crear_Juego();
                        //cerrar();
                        //CJ.setVisible(true);
                        //actualizar();
                        //JOptionPane.showMessageDialog(null, objeto_seleccionado);
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mousePressed(MouseEvent me) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mouseReleased(MouseEvent me) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mouseEntered(MouseEvent me) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mouseExited(MouseEvent me) {
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
                });

                this.Pane_objetos.add(label[Contador_celdas], null);

                int columna_temp = 1;
                temp = temp.siguiente;

                for (columnas = Contador_celdas + 1; columnas < Contador_celdas + No_columnas; columnas++) {
                    if (temp != null) {
                        label[columnas] = new javax.swing.JLabel();
                        label[columnas].setBounds(tamaño_fila * columna_temp, (tamaño_columna * multiplicador_filas), tamaño_fila, tamaño_columna);
                        label[columnas].setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                        label[columnas].setBorder(BorderFactory.createLineBorder(Color.BLUE));
                        ImageIcon img1 = new ImageIcon(cual_objeto(temp.objeto));
                        Icon icono1 = new ImageIcon(img1.getImage().getScaledInstance(70, 70, Image.SCALE_DEFAULT));
                        label[columnas].removeAll();
                        label[columnas].setIcon(icono1);
                        label[columnas].repaint();
                        label[columnas].setIcon(icono1);
                        label[columnas].setText("" + (columnas + 1));

                        this.Pane_objetos.add(label[columnas], null);

                        columna_temp++;
                        temp = temp.siguiente;
                    }
                }
            }
        }
    }

    public void actualizar() {
        SwingUtilities.updateComponentTreeUI(this);
    }

    public void cerrar() {
        this.setVisible(false);
    }

    public void llenar_matriz(int largo, int ancho, String contenido) {
        Matriz_Tablero.sampar_matriz(contenido, contador_ID, 0);
        contador_ID++;
        for (int i = 0; i < largo - 1; i++) {
            Matriz_Tablero.sampar_matriz(contenido, contador_ID, 1);
            contador_ID++;
        }
        for (int i = 0; i < ancho - 1; i++) {
            Matriz_Tablero.sampar_matriz(contenido, contador_ID, 2);
            contador_ID++;
            for (int j = 0; j < largo - 1; j++) {
                Matriz_Tablero.sampar_matriz(contenido, contador_ID, 3);
                contador_ID++;
            }
        }
        System.out.println("Imprimiendo Matriz desde llenar la matriz\n");
        Matriz_Tablero.imprimir_matriz();
    }

    public void agregar_fila() {
        Matriz_Tablero.sampar_matriz("vacio", contador_ID, 2);
        contador_ID++;
        for (int j = 0; j < contador_columnas - 1; j++) {
            Matriz_Tablero.sampar_matriz("vacio", contador_ID, 3);
            contador_ID++;
        }
    }

    public void agregar_columna() {
        Matriz_Tablero.sampar_matriz("vacio", contador_ID, 4);
        contador_ID++;
        for (int j = 0; j < contador_filas - 1; j++) {
            Matriz_Tablero.sampar_matriz("vacio", contador_ID, 5);
            contador_ID++;
        }
        Matriz_Tablero.reacomodar_indices();
    }

    public void enviar_texto(String texto) {
        this.jLabel3.setText("Objeto Seleccionado: " + texto);
    }
}
